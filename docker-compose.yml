version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ffs-postgres
    environment:
      POSTGRES_DB: feature_flags
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ffs-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ffs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ffs-network

  # Backend Application (Spring Boot)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ffs-backend
    ports:
      - "8080:8080"
    environment:
      # Database configuration
      SPRING_R2DBC_URL: r2dbc:postgresql://postgres:5432/feature_flags
      SPRING_R2DBC_USERNAME: postgres
      SPRING_R2DBC_PASSWORD: postgres

      # Flyway JDBC URL (for migrations)
      SPRING_FLYWAY_URL: jdbc:postgresql://postgres:5432/feature_flags
      SPRING_FLYWAY_USER: postgres
      SPRING_FLYWAY_PASSWORD: postgres

      # Redis configuration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379

      # Application configuration
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8080

      # CORS configuration for frontend
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000

      # Logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_FEATURE_FLAG_SERVICE: DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Optional: mount source for hot reload in development
      # - ./backend/src:/app/src
    networks:
      - ffs-network

  # Frontend Application (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development  # Use development stage for local dev
    container_name: ffs-frontend
    ports:
      - "3000:3000"
    environment:
      # API URL for backend communication
      VITE_API_URL: http://localhost:8080
    volumes:
      # Mount source code for hot reload
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      # Prevent node_modules from being overwritten
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ffs-network

networks:
  ffs-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
